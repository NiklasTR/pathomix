import numpy as np
import pandas as pd
import os
import random
import shutil

def create_data_frame(base_dir):
    data_list = []
    for root, dirs, files in os.walk(base_dir):
        for file in files:
            if file.endswith('.png'):
                dir_name = os.path.basename(root)
                relative_path = os.path.join('.', dir_name, file)
                data_list.append({"relative_path": relative_path, "label": os.path.basename(root)})
    data_frame = pd.DataFrame(data_list)
    data_frame.loc[:, ('num_label')] = data_frame.label.astype('category').cat.codes
    return data_frame


def split_data_frame(df, train_idx, val_idx):
    df_train = df.iloc[train_idx]
    df_val = df.iloc[val_idx]
    return df_train, df_val


def list_all_files_for_class(base_dir, label):
    list_of_files = []
    for root, dirs, files in os.walk(base_dir):
        for file in files:
            if not label in root:
                break
            if file.endswith('.png'):
                dir_name = os.path.basename(root)
                list_of_files.append(os.path.join(dir_name, file))
    return list_of_files


def pick_random_sample(file_list, proportion=0.2):
    pick_n = int(len(file_list) * proportion)
    return random.sample(file_list, pick_n)


def move_files(file_list, source_dir, target_dir, label):
    target_folder = os.path.join(target_dir, label)
    if not os.path.exists(target_folder):
        os.mkdir(target_folder)
    for f in file_list:
        source_path = os.path.join(source_dir, f)
        target_path = os.path.join(target_dir, f)
        shutil.move(source_path, target_path)


def create_test_set(base_dir=os.path.join(os.environ['PATHOMIX_DATA'], 'Jakob_cancer_detection', 'train')):
    labels = ['ADIMUC', 'STRMUS', 'TUMSTU']
    source_dir = '/home/pmf/Documents/DataMining/datasets/pathology/Jakob_cancer_detection/train'
    target_dir = '/home/pmf/Documents/DataMining/datasets/pathology/Jakob_cancer_detection/test'

    for l in labels:
        total_list = list_all_files_for_class(base_dir, l)
        random_list = pick_random_sample(total_list, proportion=0.2)
        move_files(random_list, source_dir, target_dir, l)

def random_crop(img, random_crop_size=(456,456)):
    # Note: image_data_format is 'channel_last'
    assert img.shape[2] == 3
    height, width = img.shape[0], img.shape[1]
    dy, dx = random_crop_size
    x = np.random.randint(0, width - dx + 1)
    y = np.random.randint(0, height - dy + 1)
    return img[y:(y+dy), x:(x+dx), :]


def crop_generator(batches, crop_length):
    """Take as input a Keras ImageGen (Iterator) and generate random
    crops from the image batches generated by the original iterator.
    """
    while True:
        batch_x, batch_y = next(batches)
        batch_crops = np.zeros((batch_x.shape[0], crop_length, crop_length, 3))
        for i in range(batch_x.shape[0]):
            batch_crops[i] = random_crop(batch_x[i], (crop_length, crop_length))
        yield (batch_crops, batch_y)